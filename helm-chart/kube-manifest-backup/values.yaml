# Default values for kube-manifest-backup.
# This is a YAML-formatted file.

replicaCount: 1

image:
  repository: kube-manifest-backup
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  name: "kube-manifest-backup-serviceaccount"

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /metrics
    port: 2112
readinessProbe:
  httpGet:
    path: /metrics
    port: 2112

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

global:
  # Access to the Kubernetes API from inside the cluster
  inCluster: true

  privateKey:
  # If the given GPG private secret key is in the cluster, the manifests for the resources marked 'secret' will be encrypted using this key.
    usePrivateGPGKey: false
    secretName: "sops-gpg"
    secretNamespace: "flux-system"
    secretKey: "sops.asc"

  # Backup schedule
  backupSchedule: "1/1 * * * *"

  # Local backup directory where the manifest files will be saved before being synced with S3
  localBackupDirectory: "backups"

  # YAML file listing the resources to backup
  backupResourcesFile: "resources.yaml"

  s3:
    # S3 bucket name where the backups will be stored
    bucketName: "my-bucket"
    # JSON file containing the Rclone-based S3 configuration
    configFile: "s3-config.json"
    # Directory in the S3 bucket where the backups will be stored
    directory: "backups"
    # Configuration items in Rclone format
    config:
      type: "s3"
      provider: "Other"
      env_auth: "false"
      access_key_id: "my-access-key"
      secret_access_key: "my-secret-key"
      region: "ZH"
      endpoint: "https://os.zhdk.cloud.switch.ch"
      chunk_size: "5Mi"
      copy_cutoff: "4.656Gi"
      list_version: "2"
      force_path_style: "true"
      list_url_encode: "false"
      use_multipart_uploads: "false"
      use_already_exists: "false"
      list_chunk: "1000"

  backupResources:
    - namespaces:
        - "renku"
      group: ""
      version: "v1"
      resource: "persistentvolumeclaims"
      secret: false
    - namespaces:
        - ""
      group: ""
      version: "v1"
      resource: "persistentvolumes"
      secret: false
    - namespaces:
        - "renku"
      group: "amalthea.dev"
      version: "v1alpha1"
      resource: "jupyterservers"
      secret: false
    - namespaces:
        - "renku"
      group: ""
      version: "v1"
      resource: "secrets"
      secret: true

  # Run a single backup and exit
  runOnce: false

  metrics:
    enabled: true
